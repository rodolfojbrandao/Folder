import random
from joblib import Parallel, delayed
import time

def Example(c):
    some_random_delay = int(2*random.random()*c)
    time.sleep(some_random_delay)  # let's pretend we're doing work 
    print some_random_delay
    return some_random_delay

num_cores = 4
jobs = Parallel(n_jobs=num_cores)(delayed(Example)(i) for i in range(10))
print jobs



import multiprocessing

def worker(num):
    """thread worker function"""
    print 'Worker:', num
    return

if __name__ == '__main__':
    jobs = []
    for i in range(5):
        p = multiprocessing.Process(target=worker, args=(i,))
        jobs.append(p)
        p.start()


from multiprocessing import Pool
 
def doubler(number):
    return number * 2
 
if __name__ == '__main__':
    numbers = [5, 10, 20]
    pool = Pool(processes=3)
    print(pool.map(doubler, numbers))